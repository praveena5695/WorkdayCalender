/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.ciena.thw.auto.workday;

import org.junit.jupiter.api.Test;
import java.time.LocalDate;
import java.time.format.DateTimeParseException;

import static org.junit.jupiter.api.Assertions.*;

public class AppTest {

    @Test public void appHasAGreeting() {
        App classUnderTest = new App();
        assertNotNull("app should have a greeting", classUnderTest.getGreeting());
    }

    @Test
    public void testCalculateWorkDay() {
        LocalDate startDate = LocalDate.of(2023, 10, 5);
        int workDays = 2;
        LocalDate expectedDate = LocalDate.of(2023, 10, 9);

        LocalDate resultDate = App.getWorkDay(startDate, workDays);
        assertEquals(expectedDate, resultDate);
    }

    @Test
    public void testCalculateWorkDay_ZeroWorkDays() {
        LocalDate startDate = LocalDate.of(2023, 10, 5);
        int workDays = 0;
        LocalDate expectedDate = startDate;

        LocalDate resultDate = App.getWorkDay(startDate, workDays);
        assertEquals(expectedDate, resultDate);
    }

    @Test
    public void testCalculateWorkDay_WeekendSkip() {
        LocalDate startDate = LocalDate.of(2023, 10, 5);
        int workDays = 3;
        LocalDate expectedDate = LocalDate.of(2023, 10, 10);

        LocalDate resultDate = App.getWorkDay(startDate, workDays);
        assertEquals(expectedDate, resultDate);
    }

    @Test
    public void testGetWorkDay_WithNegativeWorkDays() {
        LocalDate startDate = LocalDate.of(2023, 10, 5); // October 5th, 2023
        int workDays = -2; // Negative workdays
        Throwable exception = assertThrows(DateTimeParseException.class, () -> App.getWorkDay(startDate, workDays));

        String expectedMessage = "Number of work days cannot be negative.";
        assertEquals(expectedMessage, exception.getMessage());
    }

    @Test
    public void testCalculateWorkDay_MaximumWorkDays() {
        LocalDate startDate = LocalDate.of(2023, 10, 5);
        int workDays = 1000;
        LocalDate resultDate = App.getWorkDay(startDate, workDays);

        assertEquals(true, resultDate.isAfter(startDate));
    }

    @Test
    public void testCalculateWorkDay_StartsOnWeekend() {
        LocalDate startDate = LocalDate.of(2023, 10, 7); // Saturday
        int workDays = 3;
        LocalDate expectedDate = LocalDate.of(2023, 10, 11);

        LocalDate resultDate = App.getWorkDay(startDate, workDays);
        assertEquals(expectedDate, resultDate);
    }

    @Test
    public void testCalculateWorkDay_OneDay() {
        LocalDate startDate = LocalDate.of(2023, 10, 5);
        int workDays = 1;
        LocalDate expectedDate = LocalDate.of(2023, 10, 6);

        LocalDate resultDate = App.getWorkDay(startDate, workDays);
        assertEquals(expectedDate, resultDate);
    }
}